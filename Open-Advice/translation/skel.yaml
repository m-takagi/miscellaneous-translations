# review-epubmaker向けの設定ファイルの例。
# yamlファイルをReVIEWファイルのある場所に置き、
# 「review-epubmaker yamlファイル」を実行すると、<bookname>.epubファイルが
# 生成されます。
# このファイルはUTF-8エンコーディングで記述してください。

# ブック名(ファイル名になるもの。ASCII範囲の文字を使用)
bookname: skel
# 書名
booktitle: 書名
# 著者
aut: 著者
# 以下はオプション
# prt: 出版社
# asn: Associated name
# ant: Bibliographic antecedent
# clb: 貢献者
# edt: 編集者
# dsr: デザイナ
# ill: イラストレータ
# pht: 撮影者
# trl: 翻訳者
# date: 刊行日
# rights: 権利表記
# description: ブックの説明
#
# coverfile: カバーページのbody要素内に挿入する内容を記述したファイル名
#
# coverimage: カバー用画像。画像ディレクトリ内に置いてもディレクトリ名は不要(例: cover.jpg)
#
# 固有IDに使用するドメイン。指定しない場合には、時刻に基づくランダムUUIDが入る
# urnid: urn:uid:http://example.com/some-book-title/1.0.2/
# CSSファイル (yamlファイルおよびReVIEWファイルを置いたディレクトリにあること)
stylesheet: style.css
# LaTeX用のスタイルファイル(styディレクトリ以下に置くこと)
# texstyle: samplemacro
# 目次として抽出するレベル
toclevel: 3
# セクション番号を表示するレベル
secnolevel: 2
# EPUB標準の目次以外に目次を作成するか
# mytoc: nil
# 奥付を作成するか。デフォルトでは作成されない。trueを指定するとデフォルトの奥付、ファイル名を指定するとそれがcolophon.htmlとしてコピーされる
# colophon: true
# XHTML生成後に実行するプログラム。$1:HTMLの生成されたディレクトリ $2:ReVIEWファイルのあるディレクトリ $3:起動時指定のyamlファイル名
# posthook: hook.sh
# review-compileに渡すパラメータ
params: --stylesheet=style.css
# デバッグフラグ。nilでないときには一時ファイルをカレントディレクトリに作成し、削除もしない
# debug: nil
debug: nil

